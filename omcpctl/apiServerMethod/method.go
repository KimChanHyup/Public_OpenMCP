package apiServerMethod

import (
	"crypto/tls"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
)

func GetAPIServer(LINK string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// TODO: This is insecure; use only in dev environments.
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	req, err := http.NewRequest("GET", os.ExpandEnv(LINK), nil)
	if err != nil {
		// handle err
	}
	//req.Header.Set("Authorization", os.ExpandEnv("Bearer $TOKEN"))

	resp, err := client.Do(req)
	if err != nil {
		// handle err
		fmt.Println(err)
		return nil, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Check3", err)
		panic(err.Error())
	}
	return body, nil
}
func DeleteAPIServer(LINK string, body io.Reader) ([]byte, error) {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	req, err := http.NewRequest("DELETE", LINK, body)
	if err != nil {
		// handle err
	}

	req.Header.Set("Content-Type", "application/yaml")
	//req.Header.Set("Authorization", os.ExpandEnv("Bearer $TOKEN"))

	resp, err := client.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	_body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Check3", err)
		panic(err.Error())
	}

	return _body, nil

}
func PostAPIServer(LINK string, body io.Reader) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// TODO: This is insecure; use only in dev environments.
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}


	req, err := http.NewRequest("POST", os.ExpandEnv(LINK), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/yaml")
	//req.Header.Set("Authorization", os.ExpandEnv("Bearer $TOKEN"))

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	_body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Check3", err)
		panic(err.Error())
	}

	return _body, nil
}
func PutAPIServer(LINK string, body io.Reader) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// TODO: This is insecure; use only in dev environments.
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}


	req, err := http.NewRequest("PUT", os.ExpandEnv(LINK), body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/yaml")
	//req.Header.Set("Authorization", os.ExpandEnv("Bearer $TOKEN"))

	resp, err := client.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	_body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Check3", err)
		panic(err.Error())
	}

	return _body, nil
}